buildscript {
    configurations.all {
        resolutionStrategy.force 'net.java.dev.javacc:javacc:6.1.2'
    }
}

plugins {
    id "ca.coglinc.javacc" version "2.4.0"
}

plugins {
    id "org.sonarqube" version "2.6.1"
}

apply plugin: 'base'
apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'

group 'fr.uga'
version '3.8.3'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.0'
    testCompile group: 'junit', name: 'junit', version: '4.11'
}


compileJavacc {
    arguments = [debug_parser: 'false']
    inputDirectory = file('src/main/java/fr/uga/pddl4j/parser/lexer/')
    outputDirectory = file('src/main/java/fr/uga/pddl4j/parser/lexer/')
}

// The following annotation processors were detected on the compile classpath:
// 'org.apache.logging.log4j.core.config.plugins.processor.PluginProcessor'.
// Remove warning about log4j ProcessPlugin raised with --warning-mode=all
compileJava {
    options.compilerArgs += '-proc:none'
}

compileTestJava {
    options.compilerArgs += '-proc:none'
}

checkstyle {
    toolVersion = "8.9"
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                'Implementation-Version': version,
                'Gradle-Version':'Gradle 4.8',
                'Built-By': 'Damien Pellier',
                'Premain-Class': 'fr.uga.pddl4j.util.MemoryAgent',
                'Main-Class': 'fr.uga.pddl4j.planners.statespace.StateSpacePlannerFactory'
    }
    doFirst {
        from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
    }
}

task run (type: JavaExec, dependsOn: build){
    if (project.hasProperty("Args")) {
        println("arguments list : " + Args)
        args(Args.split(','))
    }

    jvmArgs = ["-javaagent:"+project.buildDir.name+"/libs/"+project.name+"-"+project.version+".jar", "-server", "-Xms2048m", "-Xmx2048m"]

    description = "Run HSP planning algorithm"
    main = "fr.uga.pddl4j.planners.statespace.StateSpacePlannerFactory"
    classpath = sourceSets.main.runtimeClasspath
}

clean{
    delete 'build', 'out', fileTree(dir: "src/main/java/fr/uga/pddl4j/parser/lexer", exclude:"Lexer.jj")
}

findbugsMain.onlyIf() { project.hasProperty('findbug') }
findbugsTest.onlyIf() { project.hasProperty('findbug') }

findbugsMain.doLast() {
    println("Find bug process completed without finding an issue")
}

findbugs {
    effort= "max"
    reportLevel = "low"
    excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
}

javadoc.doFirst() {
    excludeLexer(javadoc)
    failOnError false
}

checkstyleMain.onlyIf() { !project.hasProperty('noCheckStyle') }

checkstyleMain.doFirst() {
    excludeLexer(checkstyleMain)
}

checkstyleMain.doLast() {
    printCheckstyleVersion()
}

checkstyleTest.onlyIf() { !project.hasProperty('noCheckStyle') }

checkstyleTest.doFirst(){
    excludeLexer(checkstyleTest)
}

checkstyleTest.doLast(){
    printCheckstyleVersion()
}

test.onlyIf() { !project.hasProperty('noTest') }

test {
    // set heap size for the test JVM(s)
    minHeapSize = "512m"
    maxHeapSize = "2048m"
    forkEvery = 1 // One new JVM for each test
}

defaultTasks 'clean', 'build', 'test'

// Exclude lexer source form task
def excludeLexer(task) {
    task.exclude("**/lexer/**")
}

// Display the current version use by checkstyle plugin
def printCheckstyleVersion(){
    println("Checkstyle version: "+checkstyle.toolVersion)
}
